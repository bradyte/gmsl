00:09	Today we will discuss the benefits and functionality of
00:12	GPIO's on our block diagram.
00:15	This will be on the bidirectional communication
00:17	channel between the serializer and deserializer.
00:21	In this course we'll define what the purpose of GPIO's is, define
00:25	the system benefits of GPIO's, explain the terminology of GPIO
00:29	in the context of a GMSL link, explain the methods of
00:33	interfacing with the GPIO's, and outline the options for GPIO
00:38	configurations such as pull up or pull downs, transmit and
00:42	receive IDs, and more.
00:45	At the core of even the most complicated systems, a simple
00:49	pulse like a reset signal, control pulse or synchronization
00:52	pulse are needed for low level commands.
00:56	That is where the humble GPIO can be the companion to these
00:59	complex systems.
01:01	In systems with GMSL, the SerDes devices can transport this
01:04	signal over long distances to help a remote sensor communicate
01:08	with a local microcontroller.
01:10	The SerDes devices convert this discrete signal into a packet to
01:14	send over the GMSL link.
01:18	GPIO stands for General Purpose Input or Output.
01:24	It's a simple feature that can be utilized for purposes of
01:27	outputting digital signals or receiving digital signal inputs
01:31	with a logic high or a logic low voltage.
01:34	GPIO's are extremely common and almost assumed to be on every
01:38	microcontroller or processor.
01:40	In general, GPIO's do not provide significant current to output
01:44	loads and instead operate at standard logic levels as lower
01:47	speed control signals.
01:51	GPIO's are useful, but their usefulness quickly diminishes
01:54	when faced with great distance between GPIO interfaces.
01:58	How useful are GPIO's in an application where a sensor and
02:02	its controller are a long distance apart?
02:05	A standard logic level signal over a wire does not travel
02:08	extremely far and it will slowly degrade due to the losses in the
02:12	cable.
02:14	However, with GMSL in the system, there are already long
02:17	video and data paths that go back and forth between these
02:21	applications.
02:23	So is there a way to utilize the GMSL link?
02:26	This is where GMSL comes in to allow long distance GPIO state
02:30	transmission through its packetized link.
02:34	Since the GMSL link is a packetized one, it allows for
02:37	diverse applications.
02:39	These packets allow GPIO state transmission at the same time as
02:42	video and other data within the link.
02:45	GMSL certis can transmit GPIO states that are received on the
02:48	pins from one side to the other.
02:52	The GMSL certis is also capable of toddling the GPIO statement
02:57	program via registers.
02:59	A microcontroller can send an I ^2 C command over the GMSL link
03:02	to remotely control the GPIO on the other end of the link.
03:08	First let us look inside the devices.
03:11	The GPIO feature exists on all GMSL devices and you can access
03:15	this feature through the multi function pins or MFP's.
03:21	The main consideration is to determine the direction of the
03:24	GPIO signal transmission.
03:26	Every GPIO can be configured as an input, output or input slash
03:31	output.
03:32	However the GPIO cannot be configured to be input and
03:35	output at the same time.
03:37	The GPIO signal direction must be determined to configure the
03:40	GPIO pins as an INPUT on the serializer, an output on the
03:44	deserializer, or vice versa.
03:48	At this point it is good to clarify the transmit TX or
03:52	receive RX nomenclature that will be used with the GPI that
03:56	opens at configuration.
03:59	The GPIO pin enabled as TX will transmit its received logic
04:03	input pin state to the GMSL link.
04:07	Conversely, the GPIO pin enabled as RX will receive the remote
04:11	logic state from the GMSL link and transmit that state out to
04:15	its local pin.
04:16	Remember that the transmit TX and receive RX is in reference
04:21	to the internal GMSL link.
04:25	Aside from the direction of the GPIO signal, there are a
04:29	handful of settings used to set up the GPIO's based on the
04:33	required need, such as the transmit and receive ID, pull
04:37	down, pull up configuration, jitter reduction, and status
04:41	reporting.
04:42	We'll review the operation of each of these features next.
04:47	The GPIO capability is also very flexible within the GMSL
04:52	devices.
04:53	Each GPIO on one side of the GMSL link can be mapped to any
04:57	GPIO on the remote side using a 5 bit transmit receive ID that
05:02	is configurable for up to 32 unique GPIO mappings to map GPIO
05:07	pins together through the GMSL link.
05:10	The transmitting GPIO needs to have the same transmit ID as the
05:14	receive ID that the receiving GPIO has been configured for.
05:20	The transmit and receive IDs are by default matched up to their
05:24	GPIO numbers.
05:26	So GPIO 0 will have a receive and transmit ID of hex 0 on both
05:30	devices and they match up by default.
05:34	If the IDs do not match the GPIO will not propagate through.
05:42	The pins configured as GPIO pins on the GMSL device also
05:45	have configurable and optional pull up and pull down resistors.
05:50	The output driver type is also selectable as open drain or push
05:53	pull circuits and their edge rates can be adjusted.
05:57	It is recommended to use lower value external pull up and pull
06:00	down resistors for stronger pull up and pull down.
06:05	In certain applications jitter on the GPI of a signal could be
06:09	a concern for stricter timing requirements.
06:12	GMSL devices offer a delayed compensation mode which helps
06:16	minimize jitter by adding a fixed delay to the GPIO
06:19	transmission.
06:21	The delay is programmable in the order of a few microseconds with
06:24	the benefit of significant jitter reduction on the signal.
06:29	GMSL devices can also report the GPIO pin logic state by pulling
06:35	the GPIO in bit first.
06:37	The microprocessor sends a read command and waits for the
06:40	returning packet as the command travels to the remote SerDes
06:43	device and returns to logic low.
06:45	When the input changes and the micro checks the state again, it
06:49	is detected as a logic high.
06:56	The GPIO's pins can also be manually controlled via writing
06:59	to the device registers to pull at logic high or low or to
07:03	report back the received state.
07:06	This can be helpful when GPIO'S on the peripheral devices are
07:09	limited.
07:10	Let's summarize what we've covered in this course.
07:13	What is the purpose of GPIO'S?
07:15	GPIO'S are simple pins that allow receiving a signal input
07:19	or transmitting a signal output.
07:23	What are the system benefits of GPIO's in a GMSL system?
07:27	GPIO's can be used for a variety of low level commands like
07:31	reset, enable synchronization, etcetera.
07:36	How do you explain the terminology of GPIO in the
07:39	context of a GMSL link?
07:42	GPIO directions on the GMSL link need to be thought of in
07:45	terms of the direction that the GPI of a signal is travelling.
07:49	For example, if an SoC wants to communicate with an imager, the
07:53	SoC would output a signal to the deserializer.
07:56	The deserializer would then transmit the signal across the
07:59	link for the serializer to receive the signal.
08:03	The serializer would then output the received signal.
08:07	How do you explain the methods of interfacing with the GPIO's
08:11	GPIO's can be received and transmitted as low level signals
08:16	going into and out of the GMSL link using I2C communication.
08:21	GPIO states can be read from a register or GPIO states can be
08:25	set from a register.
08:29	What are the options for GPIO configurations?
08:33	GPIO's can be configured with transmit and receive Iges for
08:36	mapping.
08:37	Pull up and pull down resistors can be enabled and jitter can be
08:42	compensated for sensitive applications with the GMSL link
08:46	already in the system.
08:48	GPIO's provide a simple but efficient method of low level
08:52	signalling over long distances for any general purpose.
